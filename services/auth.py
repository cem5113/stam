# services/auth.py
from __future__ import annotations
import os
from typing import Literal, Optional

Role = Literal["Amir", "KullanÄ±cÄ±"]

_ROLES: tuple[Role, Role] = ("Amir", "KullanÄ±cÄ±")
_ROLE_ORDER = {"KullanÄ±cÄ±": 0, "Amir": 1}

# YaygÄ±n takma adlar â†’ normalize
_ALIAS = {
    "amir": "Amir",
    "admin": "Amir",
    "manager": "Amir",
    "supervisor": "Amir",
    "kullanÄ±cÄ±": "KullanÄ±cÄ±",
    "kullanici": "KullanÄ±cÄ±",
    "user": "KullanÄ±cÄ±",
    "viewer": "KullanÄ±cÄ±",
}

def _normalize(value: Optional[str]) -> Role:
    if not value:
        return "KullanÄ±cÄ±"
    v = str(value).strip()
    if v in _ROLES:
        return v  # type: ignore
    vlow = v.lower()
    if vlow in __ALIAS:
        return _ALIAS[vlow]  # type: ignore
    return "KullanÄ±cÄ±"

def _query_param_role() -> Optional[str]:
    """Streamlit varsa ?role=â€¦ parametresini yakalamayÄ± dener."""
    try:
        import streamlit as st
        # Yeni API: st.query_params; eski: st.experimental_get_query_params
        qp = getattr(st, "query_params", None)
        if qp is not None:
            return qp.get("role")
        qpe = getattr(st, "experimental_get_query_params", None)
        if callable(qpe):
            q = qpe() or {}
            val = q.get("role")
            if isinstance(val, list):
                return val[0]
            return val
    except Exception:
        pass
    return None

def get_role() -> Role:
    """
    Ã–ncelik: session_state â†’ URL ?role=â€¦ â†’ ENV(APP_ROLE) â†’ secrets.DEFAULT_ROLE â†’ 'KullanÄ±cÄ±'
    """
    # 1) Session
    try:
        import streamlit as st
        r = st.session_state.get("role")
        if r in _ROLES:
            return r  # type: ignore
    except Exception:
        pass

    # 2) Query param
    qp = _query_param_role()
    if qp:
        return _normalize(qp)

    # 3) ENV
    r_env = os.environ.get("APP_ROLE")
    if r_env:
        return _normalize(r_env)

    # 4) Secrets (varsayÄ±lan)
    try:
        import streamlit as st
        r_sec = st.secrets.get("DEFAULT_ROLE", None)  # Ã¶rn: "Amir" / "KullanÄ±cÄ±"
        if r_sec:
            return _normalize(r_sec)
    except Exception:
        pass

    # 5) Fallback
    return "KullanÄ±cÄ±"

def set_role(role: Role) -> None:
    """RolÃ¼ hem sessionâ€™a hem ENVâ€™e yazar (UI/CLI uyumlu)."""
    try:
        import streamlit as st
        st.session_state["role"] = _normalize(role)
    except Exception:
        pass
    os.environ["APP_ROLE"] = _normalize(role)

def can_approve() -> bool:
    return get_role() == "Amir"

def has_permission(action: str) -> bool:
    """
    Basit izin matrisi. Gerekirse geniÅŸlet:
      approve â†’ Amir
      view    â†’ KullanÄ±cÄ±+
    """
    role = get_role()
    if action == "approve":
        return role == "Amir"
    # varsayÄ±lan: gÃ¶rÃ¼ntÃ¼leme serbest
    return True

def ensure_amir_or_warn(action_name: str = "bu iÅŸlem") -> bool:
    """
    Streamlit iÃ§inde Ã§aÄŸrÄ±lÄ±rsa uygun uyarÄ±yÄ± basar; CLIâ€™da sadece False dÃ¶ner.
    """
    if can_approve():
        return True
    try:
        import streamlit as st
        st.warning(f"ğŸ”’ {action_name} iÃ§in **Amir** rolÃ¼ gerekli.")
    except Exception:
        pass
    return False

def role_selector_in_sidebar(default: Role = "KullanÄ±cÄ±") -> Role:
    """
    Streamlit varsa sidebarâ€™da rol seÃ§ici render eder; seÃ§imi dÃ¶ndÃ¼rÃ¼r.
    Query param (?role=Amir) varsa ilk yÃ¼klemede onu uygular.
    """
    cur = get_role() or default
    try:
        import streamlit as st
        # Ä°lk yÃ¼klemede URL paramÄ± geldiyse sessionâ€™a yaz
        qp_role = _query_param_role()
        if qp_role:
            cur = _normalize(qp_role)
            st.session_state["role"] = cur

        role = st.sidebar.selectbox("Rol", _ROLES, index=_ROLES.index(cur))
        set_role(role)
        st.sidebar.caption("Rol: **Amir** â†’ onay/yetki â€¢ **KullanÄ±cÄ±** â†’ gÃ¶rÃ¼ntÃ¼leme.")
        return role  # type: ignore
    except Exception:
        # Streamlit yoksa mevcut rolÃ¼ dÃ¶ndÃ¼r
        return _normalize(cur)
